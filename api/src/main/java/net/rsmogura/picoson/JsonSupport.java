/*
 * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
 * agreements. See the NOTICE file distributed with this work for additional information regarding
 * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the License. You may obtain a
 * copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */

package net.rsmogura.picoson;

import java.util.ArrayList;
import java.util.Collection;

public abstract class JsonSupport<T> {
  //TODO Fill up JavaDoc

  /**
   * Implementation of read - typically generated by annotation processor or
   * class transformer.
   */
  protected abstract T readI(JsonReader in);

  /**
   * Implementation of write - typically generated by annotation processor or
   * class transformer.
   */
  protected abstract void writeI(T src, JsonWriter out);

  public T read(JsonReader in) {
    return readI(in);
  }

  public void write(T src, JsonWriter out) {
    writeI(src, out);
  }

  /**
   * Reads collection of properties and adds it to the specified collection.
   */
  public <C extends Collection<T>> C readCollection(JsonReader in, C collection) {
    if (in.peek() == JsonToken.NULL) {
      return collection;
    }

    if (collection == null) {
      // Dirty...
      collection = (C) new ArrayList<T>();
    }

    in.beginArray();
    JsonToken token;
    while ((token = in.peek()) != JsonToken.END_ARRAY) {
      T readObject = this.read(in);
      collection.add(readObject);
    }
    in.endArray();

    return collection;
  }

  /**
   * Writes collection of elements into writer.
   */
  public <C extends Collection<T>> void writeCollection(JsonWriter out, C collection) {
    if (collection == null) {
      return;
    }

    out.beginArray();
    for (T val : collection) {
      write(val, out);
    }
    out.endArray();
  }
}
